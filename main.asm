; TODO INSERT CONFIG CODE HERE USING CONFIG BITS GENERATOR
    LIST P=16F887
    #INCLUDE "p16f887.inc"

RES_VECT  CODE    0x0000            ; processor reset vector
    GOTO    MAIN                   ; go to beginning of program
    ORG 0x04
	GOTO RUTINA_INTERR;
	
MIS_VARIABLES UDATA_SHR
TEMP_W RES 1
TEMP_STATUS RES 1
BANDERAS RES 1;REGISRO DE MIS BANDERAS EN POSICION 0:ADC,1:TMR0(250MS),2:1SEG,3:UART 
VALOR_ADC_H RES 1
VALOR_ADC_L RES 1
REGRE_DE_240 RES 1
CANT_MEDICIONES RES 1
REGRE_BUFFER RES 1
 
 
MI_ADC_F EQU 0
MI_TMR0_F EQU 1
MI_1MIN_F EQU 2
MI_BUF_COMPL EQU 3
MI_ENVIO8B_F EQU 4
MI_ENVIO_EN_PROG EQU 5; Que nadie toque el buffer porque lo estoy transmitiendo!!!
MI_ENVIO_COMPLETADO EQU 6;
 
; TODO ADD INTERRUPTS HERE IF USED

MAIN_PROG CODE                      ; let linker place main program

CONFIG_ADC:
    BANKSEL TRISA
    MOVLW B'00000001';PONE RA0 COMO ENTRADA
    IORWF TRISA;
    MOVLW B'00001110';CERO JUSTIFICA A LA IZQUIERDA Y PONGO 1110 PARA QUE SOLO RA0 SEA ANALOGICA
    MOVWF ADCON1;
    ;HABILITO LA INTERRUPCION POR ADC
    BSF PIE1, ADIE;
    BCF PIE1, ADIF;
    BSF INTCON, PEIE;
    BSF INTCON, GIE;
    BANKSEL ADCON0;
    MOVLW B'11000001'; 11 CLOCK FRC, 000 CANAL0, 1 ENCENDIDO
    MOVWF ADCON0
    CALL ESPERA_11_5US; TIEMPO MINIMO DESDE LA CONFIG HSATA QUE PUEDE CONVERTIR
    ;BSF ADCON0, GO; QUE ARRANQUE A CONVERTIR
    RETURN
    
CONFIG_TIMER0:
    ;CALCULOS PARA OSCILADOR EN 1MHZ
    BANKSEL STATUS;
    MOVLW B'00101111';MODO CONTADOR,FLACO DE SUBIDA,PRESCALER EN 256
    MOVWF OPTION_REG;
    BANKSEL INTCON;
    ;HABILITAMOS LAS INTERRUPCIONES PARA EL TIMER0
    BSF INTCON, T0IE;
    BSF INTCON, GIE;
    MOVLW .14;VALOR CALCULADO PARA CONSEGUIR INTERRUPCIONES CADA 250MILIS
    MOVWF TMR0;
    MOVLW .240;
    MOVWF REGRE_DE_240;
    RETURN;

CONFIG_UART:
    ;necesito poner laa uart en modo transmision con una vel de 10417 baudios.
    ; SPBRG = INT(CLOCK/(F*V_DESEADA)-1)
    ; BRobt = CLOCK/(Fx(SPBRG+1))
    ; SPBRG = INT(1M/(64*10417)-1)= 0
    ; SPBRG = INT(1M/(16*10417)-1)= 5
    ; BRobt = 1M/(16x(5+1))= 10416.66 OK!
    ; F=64 BRGH=0, F=16 BRGH=1 
    BSF TXSTA,BRGH; F=16
    BCF TXSTA,SYNC; ASINCRONO
    BSF RCSTA,SPEN; HABILITA el puerto serie
    BSF TXSTA,TXEN; HABILITA la transmision
    BCF TXSTA,TX9; Solo voy a mandar de a 8 bits
    MOVLW .5;
    MOVWF SPBRG;
    BSF INTCON, GIE;
    BSF INTCON, PEIE;
    BSF PIE1, TXIE;
    RETURN;
    
CONFIGURAR:
    MOVLW 0xA0;
    MOVWF FSR;
    MOVLW .10;
    MOVWF CANT_MEDICIONES;
    MOVLW .20;
    MOVWF REGRE_BUFFER;
    
    CALL CONFIG_ADC;
    CALL CONFIG_TIMER0;
    CALL CONFIG_UART;

ESPERA_11_5US:
    RETURN;
    
RUTINA_INTERR:
    MOVWF TEMP_W
    SWAPF STATUS, W
    MOVWF TEMP_STATUS
    
    BTFSC PIR1, ADIF;SALTO EL ADC?
    BSF BANDERAS, MI_ADC_F;LEVANTO MI BANDERA ADC
    BTFSC INTCON, T0IF;
    BSF BANDERAS, MI_TMR0_F;LEVANTO MI BANDERA TMR0
    BTFSC PIR1, TXIF;
    BSF BANDERAS, MI_ENVIO8B_F;LEVANTO MI BANDERA DE ENVIO DE 8bits TERMINADO
    
    
    SWAPF TEMP_STATUS, W
    MOVWF STATUS
    SWAPF TEMP_W, F
    SWAPF TEMP_W, W
    
    ;BCF PIR1, ADIF; LIMPIO EL FLAG DE INT DEL ADC
    RETFIE
    
    
GUARDAR_EN_BUFF:
    BTFSC BANDERAS,MI_ENVIO_EN_PROG;che, si hay un envio en progreso no hago nada.
    RETURN;
    ;Vamos a guardar 10 pares por medicion osea un total de 20 registros de la mem.
    MOVFW VALOR_ADC_H;
    MOVWF INDF;
    INCF FSR;
    MOVFW VALOR_ADC_L;
    MOVWF INDF;
    INCF FSR;
    DECFSZ CANT_MEDICIONES;
    RETURN;
    BSF BANDERAS, MI_BUF_COMPL;
    
    
    
CONVERSION_DISP:
    ;ADRESH                ADRESL
    ;[_ _ _ _ _ _ B B] [B B B B B B B B]
    ; 0 0 0 0 0 0 0 0   0 0 0 0 0 0 0 0 minimo 0v 0 grados
    ; 0 0 0 0 0 0 0 1   0 0 0 0 0 0 0 0 minimo 0v 7.5grados
    ; 0 0 0 0 0 0 1 0   0 0 0 0 0 0 0 0 minimo 0v 15 grados
    ; 0 0 0 0 0 0 1 1   1 1 1 1 1 1 1 1 maximo 5v 30grados
    
    BTFSS ADRESH, 1; verificamos si medimos >=15grados
    RETURN;
    ;laburo
    MOVF ADRESL,W;
    MOVWF VALOR_ADC_L;
    MOVF ADRESH,W;
    MOVWF VALOR_ADC_H;
    BCF PIR1, ADIF; LIMPIO EL FLAG DE INT DEL ADC PORQ HAY QUE HACER LO MINIMO POSIBLE EN LA RUTINA DE INT.
    ;BSF ADCON0, GO; YA TE LEÍ ARRANCA A CONVERTIR EL PROXIMO VALOR
    BCF BANDERAS,MI_ADC_F;BAJO MI BANDERA DEL ADC, limpio la bandera que me trajo aqui.
    CALL GUARDAR_EN_BUFF;
    RETURN
    
PASARON_250M:
    MOVLW .14;
    MOVWF TMR0;
    DECFSZ REGRE_DE_240, F;
    RETURN
    BSF BANDERAS, MI_1MIN_F;LEVANTO MI BANDERA DE 1SEG
    MOVLW .240;
    MOVWF REGRE_DE_240;
    BCF INTCON, T0IF;
    BCF BANDERAS, MI_TMR0_F;BAJO MI BANDERA DEL TIMER0
    RETURN;

    
ENVIAR_BUF_POR_UART:
    BSF BANDERAS, MI_ENVIO_EN_PROG;che hay un envio en prog que nadie toque el bufer
    MOVLW .10;
    MOVWF CANT_MEDICIONES;restaruo el valor de la cant de med que necesito en el bufer
    MOVLW 0xA0;
    MOVWF FSR;restaruo ek valor del puntero al buffer
    BCF BANDERAS, MI_BUF_COMPL;limpio la bandera que me trajo aqui.
    CALL ENVIAR_PROX_8BITS;
    RETURN;

ENVIAR_PROX_8BITS:
    MOVFW INDF;
    MOVWF TXREG;
    DECFSZ REGRE_BUFFER;
    RETURN;
    BCF BANDERAS, MI_ENVIO8B_F;limpio la bandera que me trajo aqui desde la interrupcion.
    BSF BANDERAS, MI_ENVIO_COMPLETADO;
    
    

ENVIO_BUF_COMPLETO:
    MOVLW .20;
    MOVWF REGRE_BUFFER;restarurar el valor para cuando quiera enviar el buffer completo la proxima vez
    BCF BANDERAS, MI_ENVIO_COMPLETADO;limpio la bandera que me trajo aqui
    BCF BANDERAS, MI_ENVIO_EN_PROG;limpio la bandera para que se pueda usar el buffer de nuevo.
    MOVLW 0xA0;
    MOVWF FSR;restauramos el valor del puntero para poder guardar las nuevas mediciones.
    
    RETURN
    
PASO_UN_MIN:
    ;ACA TENGO QUE COMENZAR LA CONVERSION
    BCF ADCON0,GO;
    BCF BANDERAS, MI_1MIN_F;BAJO MI BANDERA DE 1MIN
    RETURN
    
MAIN
    CALL CONFIGURAR;
LOOP
    BTFSC BANDERAS, MI_ADC_F;SI SALTO LA BANDERA DEL ADC ENTONCES REVISO LA CONVERSION
    CALL CONVERSION_DISP;
    
    BTFSC BANDERAS, MI_TMR0_F;SI SALTO LA BANDERA DEL TIMER CADA 250 MILISEC
    CALL PASARON_250M;
    
    BTFSC BANDERAS, MI_1MIN_F;SI SALTO LA BANDERA CUANDO PASO 1 MIN.
    CALL PASO_UN_MIN;
    
    BTFSC BANDERAS, MI_BUF_COMPL;SI SALTO LA BANDERA DE QUE EL BUFER ESTA COMPLETO.
    CALL ENVIAR_BUF_POR_UART;
    
    BTFSC BANDERAS, MI_ENVIO8B_F;SI SALTO LA BANDERA DE QUE EL BUFER ESTA COMPLETO.
    CALL ENVIAR_PROX_8BITS;
    
    BTFSC BANDERAS, MI_ENVIO_COMPLETADO;SI SALTO LA BANDERA DE QUE EL BUFER ESTA COMPLETO.
    CALL ENVIO_BUF_COMPLETO;
    GOTO LOOP;
    

    END

    




    
   